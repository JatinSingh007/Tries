
import sys
sys.setrecursionlimit(1000000)

class Trie():

    def __init__(self,value):

        self.value = value
        self.left = None
        self.right = None



def insert(n,head):

    cur_node = head

    for i in range(31,-1,-1):
        z = (n>>i)&1

        if z == 0:
            if cur_node.left == None:
                cur_node.left = Trie(z)
            cur_node = cur_node.left
        else:
            if cur_node.right == None:
                cur_node.right = Trie(z)
            cur_node = cur_node.right

def maxi(n,head):

    cur_node = head
    cur_xor = 0
    for i in range(31,-1,-1):
        z = (n>>i)&1
        if cur_node == None:
            break
        if z == 0:

            if cur_node.right!=None:
                cur_node = cur_node.right
                cur_xor+=pow(2,i)
            else:

                cur_node = cur_node.left
        if z == 1:
            if cur_node.left!=None:
                cur_node = cur_node.left
                cur_xor+=pow(2,i)
            else:

                cur_node = cur_node.right



    return cur_xor

def delete(cur_node):

    queue = [cur_node]

    while queue:
        z = queue.pop(0)

        if z.left:
            queue.append(z.left)
        elif z.right:
            queue.append(z.right)

        del(z)







n,m = map(int,raw_input().split())

l = []
a = []
for i in range(n):
    k = list(map(int,raw_input().split()))
    k1 = [0]*(len(k)+1)
    l.append(k)
    a.append(k1)

b = [0]*(n*m+1)

for i in range(n):
    for j in range(m):

        a[i][j+1] = a[i][j]^l[i][j]


maxii = 0
for i in range(m):
    for j in range(i,m):
        head = Trie(0)
        for k in range(1,n+1):
            b[k] = b[k-1]^a[k-1][j]^a[k-1][i-1]
            maxii = max(maxi(b[k],head),maxii)

            insert(b[k],head)







        delete(head)




print(maxii)
